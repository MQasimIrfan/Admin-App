import React, { useRef, useEffect, useState } from "react";

function App() {
  const facialRecognitionModel =
    process.env.REACT_APP_FACE_RECOGNITION_MODEL || "Facenet";
  const faceDetector = process.env.REACT_APP_DETECTOR_BACKEND || "opencv";
  const distanceMetric = process.env.REACT_APP_DISTANCE_METRIC || "cosine";

  const serviceEndpoint = process.env.REACT_APP_SERVICE_ENDPOINT;
  const antiSpoofing = process.env.REACT_APP_ANTI_SPOOFING === "1";

  const videoRef = useRef(null);
  const canvasRef = useRef(null);

  const [base64Image, setBase64Image] = useState("");
  const [isVerified, setIsVerified] = useState(null);
  const [identity, setIdentity] = useState(null);
  const [facialDb, setFacialDb] = useState([]);

  useEffect(() => {
    // Load facial database from local directory
    const fetchFacialDb = async () => {
      try {
        const images = ["qasim.jpg"]; // qasim.jpg,Imran.jpg,mark.jpeg
        const db = await Promise.all(
          images.map(async (image) => {
            const response = await fetch(`/facial.db/${image}`);
            const blob = await response.blob();
            const base64 = await blobToBase64(blob);
            return { name: image.split(".")[0], base64 };
          })
        );
        setFacialDb(db);
      } catch (error) {
        console.error("Error loading facial database:", error);
      }
    };

    fetchFacialDb();
  }, []);

  const blobToBase64 = (blob) => {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.onloadend = () => resolve(reader.result);
      reader.onerror = reject;
      reader.readAsDataURL(blob);
    });
  };

  useEffect(() => {
    let video = videoRef.current;
    if (video) {
      const getVideo = async () => {
        try {
          const stream = await navigator.mediaDevices.getUserMedia({
            video: true,
          });
          video.srcObject = stream;
          await video.play();
        } catch (err) {
          console.error("Error accessing webcam: ", err);
        }
      };
      getVideo();
    }
  }, []);

  const captureImage = async (task) => {
    setIsVerified(null);
    setIdentity(null);

    const video = videoRef.current;
    const canvas = canvasRef.current;
    const context = canvas.getContext("2d");

    canvas.width = video.videoWidth;
    canvas.height = video.videoHeight;

    context.drawImage(video, 0, 0, canvas.width, canvas.height);

    const base64Img = canvas.toDataURL("image/png");
    setBase64Image(base64Img);

    if (task === "verify") {
      await verify(base64Img);
    }
  };

  const verify = async (base64Image) => {
    try {
      for (const person of facialDb) {
        const requestBody = JSON.stringify({
          model_name: facialRecognitionModel,
          detector_backend: faceDetector,
          distance_metric: distanceMetric,
          align: true,
          img1: base64Image,
          img2: person.base64,
          enforce_detection: false,
          anti_spoofing: antiSpoofing,
        });

        const response = await fetch(`${serviceEndpoint}/verify`, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: requestBody,
        });

        const data = await response.json();

        if (response.status === 200 && data.verified) {
          setIsVerified(true);
          setIdentity(person.name);
          return;
        }
      }

      setIsVerified(false);
    } catch (error) {
      console.error("Exception while verifying image:", error);
    }
  };

  return (
    <div
      className="App"
      style={{
        display: "flex",
        flexDirection: "column",
        justifyContent: "center",
        alignItems: "center",
        minHeight: "100vh",
        textAlign: "center",
        backgroundColor: "#282c34",
        color: "white",
      }}
    >
      <header className="App-header">
        <h1>DeepFace React App</h1>
        {isVerified === true && (
          <p style={{ color: "green" }}>Verified. Welcome {identity}</p>
        )}
        {isVerified === false && <p style={{ color: "red" }}>Not Verified</p>}
        <video ref={videoRef} style={{ width: "100%", maxWidth: "500px" }} />
        <br />
        <button onClick={() => captureImage("verify")}>Verify</button>
        <canvas ref={canvasRef} style={{ display: "none" }} />
      </header>
    </div>
  );
}

export default App;
